# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app_version: '%env(APP_VERSION)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Migrations,Tests,Kernel.php}'

    # Documentation modifier
    App\OpenApi\JwtDecorator:
        decorates: 'api_platform.openapi.factory'
        autoconfigure: false

    # Authentication
    security.authentication.provider.key_secret:
        alias: App\Security\Authentication\Provider\KeySecretAuthenticationProvider

    App\Security\Authentication\Provider\KeySecretAuthenticationProvider:
        abstract: true
        arguments:
            - '@App\Security\Repository\ApiKeyRepository'
            - null
            - null
            - null
            - '%security.authentication.hide_user_not_found%'

    security.authentication.listener.key_secret_json:
        alias: App\Security\Firewall\KeySecretJsonAuthenticationListener

    App\Security\Firewall\KeySecretJsonAuthenticationListener:
        abstract: true
        arguments:
            - '@security.token_storage'
            - '@security.authentication.manager'
            - '@security.http_utils'
            - null
            - null
            - null
            - []
            - '@logger'
            - '@event_dispatcher'
            - '@property_accessor'

    App\Security\Authentication\EventListener\JwtCreatedListener:
        arguments: [ '@security.token_storage']
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    App\Security\Authentication\Provider\CompanyProvider:
        arguments:
            $defaultRoles: [ROLE_USER]
            $appEnv: '%env(APP_ENV)%'
            $logger: '@logger'

    App\Security\Authentication\Controller\KeySecretRefreshToken:
        public: true
        arguments:
            - "@gesdinet.jwtrefreshtoken.authenticator"
            - "@gesdinet.jwtrefreshtoken.user_provider"
            - "@lexik_jwt_authentication.handler.authentication_success"
            - "@lexik_jwt_authentication.handler.authentication_failure"
            - "@gesdinet.jwtrefreshtoken.refresh_token_manager"
            - "%gesdinet_jwt_refresh_token.ttl%"
            - "%gesdinet_jwt_refresh_token.security.firewall%"
            - "%gesdinet_jwt_refresh_token.ttl_update%"
            - "@event_dispatcher"

    gesdinet.jwtrefreshtoken.authenticator:
        class: App\Security\Authenticator\ApiKeyRoleAwareRefreshTokenAuthenticator
        arguments:
            - "@gesdinet.jwtrefreshtoken.user_checker"
            - "@gesdinet.jwtrefreshtoken.refresh_token_manager"
            - '@App\Security\Authentication\Provider\CompanyProvider'
            - "%gesdinet_jwt_refresh_token.token_parameter_name%"
            - '@logger'

    gesdinet.jwtrefreshtoken.send_token:
        class: App\Security\Authentication\EventListener\AttachRefreshTokenOnSuccessListener
        arguments:
            - "@gesdinet.jwtrefreshtoken.refresh_token_manager"
            - "%gesdinet_jwt_refresh_token.ttl%"
            - "@validator"
            - "@request_stack"
            - "%gesdinet_jwt_refresh_token.user_identity_field%"
            - "%gesdinet_jwt_refresh_token.token_parameter_name%"
            - "%gesdinet_jwt_refresh_token.single_use%"
            - '@App\Security\Repository\ApiKeyRepository'
            - '@App\Security\Repository\PermissionRepository'
            - '@logger'
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: attachRefreshToken }

    lexik_jwt_authentication.handler.authentication_success:
        class: App\Security\Authentication\AuthenticationSuccessHandler
        arguments:
            - "@lexik_jwt_authentication.jwt_manager"
            - '@Symfony\Component\EventDispatcher\EventDispatcherInterface'
            - '@logger'
